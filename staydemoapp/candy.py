# file created: 2024-02-19 08:07:04.091703

# this files has been generated by CandyTranslate.com  Please do not change manually
# author: Next Level Sense

# Available functions:
#    render - replacement for django render function
#    path - replacement for django path function. please use with * when replacing in urls.py
#    supported_languages - list that contains all available languages for this site
# Functions to be used in django templates:
#    languageReferences - create 'alternate' language references for SEO.
#        put it inside of the <head> section of the page in format {{languageReferences|safe}}
#    lang - current language. Used mostly in <html lang="{{lang}}">
#    languageMenu - adding language selection for your page. Format: {{languageMenu|safe}}
#    <<link variables>> - create linking to correct language link. 
#    usage:
#    for translated pages change {% url "my_page" %}
#    to name without quotes:     {% url my_page %}


supported_languages = ['en', 'hi', 'it']

def translation_dictionary(lang):
    if lang == 'en': return {
        'all_login':'''Login''',
        'all_register':'''Register''',
        'all_registerproperty':'''Register Your Property''',
        'all_registerguide':'''Register As a travel guide''',
        'all_h1':'''Create your Home, whereever you go''',
        }
    if lang == 'hi': return {
        'all_login':'''लॉग इन करें''',
        'all_register':'''पंजीकरण करवाना''',
        'all_registerproperty':'''अपनी संपत्ति पंजीकृत करें''',
        'all_registerguide':'''एक यात्रा गाइड के रूप में पंजीकरण करें''',
        'all_h1':'''अपना घर बनाएं, जहां भी आप जाते हैं''',
        }
    if lang == 'it': return {
        'all_login':'''Login''',
        'all_register':'''Registrati''',
        'all_registerproperty':'''Registra la tua proprietà''',
        'all_registerguide':'''Registrati come guida di viaggio''',
        'all_h1':'''Crea la tua casa, ovunque tu vada''',
        }


def detectLanguage(request):
    languageDetected = supported_languages[0]
    pagePath = request.path
    if pagePath[-1] == '/': pagePath=pagePath[:-1]
    pagePath = pagePath.split('?')[0]
    pagePath = pagePath.split('#')[0]
    lastPath = pagePath.split('/')[-1]
    if lastPath in supported_languages[1:]:
        languageDetected = lastPath
    return languageDetected


def translated(requestOrLang,TranslateVariable):
    if requestOrLang in supported_languages:
        lang=requestOrLang
    else:
        lang = detectLanguage(requestOrLang)
    return translation_dictionary(lang)[TranslateVariable]


def localizeLink(request, link):
    lang=detectLanguage(request)
    if lang == supported_languages[0]: return link
    index1 = link.find('#')
    index2 = link.find('?')
    if index1 == -1 and index2 == -1: smallest_index = len(link)
    elif index1 == -1: smallest_index = index2
    elif index2 == -1: smallest_index = index1
    else: smallest_index = min(index1, index2)
    path = link[:smallest_index]
    if path[-1] == '/': path=path[:-1]
    return path+'/'+lang+link[smallest_index:]


from django.shortcuts import redirect as org_redirect
def redirect(request, to, *args, permanent=False, **kwargs):
    lang=detectLanguage(request)
    if lang in supported_languages[1:]:
        to=to+'_'+lang
    return org_redirect(to, *args, permanent=permanent, **kwargs)


from django.urls import path as org_path
def path(route, view, kwargs=None, name=None):
    if route == '':
        return [org_path('', view, kwargs, name),org_path('hi', view, kwargs, name+'_hi'),org_path('it', view, kwargs, name+'_it'),]
    if route[-1] == '/': route=route[:-1]
    return [org_path(route, view, kwargs, name),org_path(route+'/hi', view, kwargs, name+'_hi'),org_path(route+'/it', view, kwargs, name+'_it'),]


def langRef(path_ref):
    last=path_ref.split('/')[-1]
    if last in supported_languages:
        path_ref=path_ref[:-len(last)-1]
    result='<link rel="alternate" hreflang="en" href="'+addLinks(path_ref,'')+'" />\n'
    result+='<link rel="alternate" hreflang="hi" href="'+addLinks(path_ref,'hi')+'" />\n'
    result+='<link rel="alternate" hreflang="it" href="'+addLinks(path_ref,'it')+'" />\n'
    result+='<link rel="alternate" hreflang="x-default" href="'+addLinks(path_ref,'')+'" />\n'
    return result


from django.urls import get_resolver
def translatedLinks(lang):
    names=[]
    for i in get_resolver().url_patterns:
        if hasattr(i, 'name'):
            if i.name:
                names.append(i.name)
    result = {}
    if lang == supported_languages[0]:
        for i in names:
            if i[-3:] not in ['_hi', '_it'] and names.count(i+'_hi'):
                result.update({i:i})
        return result
    for i in names:
        if names.count(i+'_'+lang):
            result.update({i:i+'_'+lang})
    return result


def languageMenu(request, lang):
    path = request.path
    remainder = request.get_full_path()[len(path):]
    selected = [' ', ' ', ' ']
    selected[supported_languages.index(lang)]=' selected '
    if supported_languages.index(lang):
        path=path[:-3]
    result = '<select id="languageMenu" onchange="window.location = this.value;">'
    if path == '/': path = ''
    if path =='':
        result += '<option'+selected[0]+'value="/'+remainder+'">English (English)</option>'
    else:
        result += '<option'+selected[0]+'value="' + path + remainder +'">English (English)</option>'
    result += '<option'+selected[1]+'value="' + path +'/hi'+remainder+'">Hindi (हिन्दी)</option>'
    result += '<option'+selected[2]+'value="' + path +'/it'+remainder+'">Italian (Italiano)</option>'
    result += '</select>'
    return result


from django.shortcuts import render as org_render
def render(request, template_name, context=None, *args, **kwargs):
    lang=detectLanguage(request)
    if context == None:
        context={}
    return org_render(request, template_name, {**context,
                                                **translation_dictionary(lang),
                                                'lang':lang,
                                                'languageReferences':langRef(request.build_absolute_uri()),
                                                'languageMenu':languageMenu(request, lang),
                                                'candyLink':translatedLinks(lang),
                                                }, *args, **kwargs)


def addLinks(*args):
    result=''
    for i in args:
        if result and result[-1]=='/':result=result[:-1]
        if i and i[-1]=='/':i=i[:-1]
        if i and i[0]=='/':i=i[1:]
        if result and i: result+='/'
        result+=i
    return result


def provideSitemap(request, add_pages=[], remove_pages=[], remove_paths=[]):
    from django.http import HttpResponse
    result='<?xml version="1.0" encoding="UTF-8"?>'+'\n'
    result+='<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'+'\n'
    domain= request.build_absolute_uri()
    domain=domain.split('/')[0]+'//'+domain.split('/')[2]+'/'
    paths = []
    for i in get_resolver().url_patterns:
        if str(type(i))=="<class 'django.urls.resolvers.URLPattern'>":
            try:
                route=i.pattern._route
                route=route.split('<')[0]
                if not route == 'sitemap.xml':
                    if 'robots.txt' not in route:
                        paths.append(addLinks(domain,route))
            except: pass
    paths+=add_pages
    paths=list(dict.fromkeys(paths))
    for route in paths:
        removed_path = False
        for removal in remove_paths:
            if route[:len(removal)] == removal: removed_path = True
        if not removed_path and route not in remove_pages:
            result+='<url>'+'\n'
            result+='<loc>'+route+'</loc>'+'\n'
            result+='</url>'+'\n'
    result+='</urlset>'
    result= result.encode('utf-8')
    return HttpResponse(result, content_type='application/xml; charset=utf-8')


def sitemap(add_pages=[], remove_pages=[], remove_paths=[]):
    return [org_path('sitemap.xml', provideSitemap,{'add_pages' :add_pages,'remove_pages': remove_pages, 'remove_paths': remove_paths})]


